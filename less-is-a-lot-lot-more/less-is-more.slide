Go
Less is a lot lot more
27 Apr 2015
Tags: go, golang

var Natel, Katcipis Tiago
Neoway Business Solution
tiago.natel@neoway.com.br / tiago.katcipis@neoway.com.br
http://github.com/NeowayLabs/presentations
@golang ON Slack


* Agenda

- Why another language ?
- How Go improves on other languages ?
- Formating code
- Concurrency model
- Memory model
- Abstractions 
- Modules
- Testing 
- Deployment
- Built in stuff


* Why another language 

* The problem

- Need for some serious system programming
- Pretty low level stuff (performance also a problem), so C++ was used
- Huge C++ systems have been developed (at Google)
- C++0x (today C++11) has been presented at Google
- Lot of stuff added, nothing removed
- Far from simple :-(
- Concurrency was a pain in the ass
- Maintaining a large code base was also a pain in the ass


* The solution

- A language that could do serious system programming
- That has easy access to low level stuff 
- Where performance is not a problem
- If the system grows it can scale (yeah, it is a monolith :P)
- Minimal set of features to enable great software
- Concurrency at your fingertips
- No more formating code wars :-)
- KISS :-)


For more info see [[http://commandcenter.blogspot.ca/2012/06/less-is-exponentially-more.html][Less is exponentially more]]


* Concurrency model


* No more callback hell

Thanks to Channels and Goroutines all that you write is synchronous code.

It is like writing multi-threaded synchronous code, but without losing your sanity and personal life :-)
(it is hard to have a personal life when everything you do is debug non-deterministic code)


* Memory model

* Objects

* Abstractions

* Modules

* Testing

* Deployment
