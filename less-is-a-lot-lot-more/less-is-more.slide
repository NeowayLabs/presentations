Go
Less is a lot lot more
27 Apr 2015
Tags: go, golang

var Natel, Katcipis Tiago
Neoway Business Solution
tiago.natel@neoway.com.br / tiago.katcipis@neoway.com.br
http://github.com/NeowayLabs/presentations
@golang ON Slack


* Agenda

- Why another language ?
- How Go improves on other languages ?
- Creators
- Concurrency model
- Memory model
- Abstractions 
- Modules
- Testing 
- Deployment
- Built in stuff
- Syntax


* Why another language 

* The problem

- Need for some serious system programming
- Pretty low level stuff (performance also a problem), so C++ was used
- Huge C++ systems have been developed (at Google)
- C++0x (today C++11) has been presented at Google
- Lot of stuff added, nothing removed
- Far from simple :-(
- Concurrency was a pain in the ass
- Maintaining a large code base was also a pain in the ass


* The solution

- A language that could do serious system programming
- That has easy access to low level stuff 
- Where performance is not a problem
- If the system grows it can scale (yeah, it is a monolith :P)
- Minimal set of features to enable great software
- Concurrency at your fingertips
- No more formating code wars :-)
- KISS :-)


For more info see [[http://commandcenter.blogspot.ca/2012/06/less-is-exponentially-more.html][Less is exponentially more]]

* Designed by

- Rob Pike (Plan9, Limbo, UTF-8, Sam, Acme)
- Ken Thompson (B, C, Unix, Plan9, UTF-8, ed)
- Robert Griesemer

.image images/Plan9-1995-729x600.gif 350 _

* Mascot

- Glenda -> Gopher

.image images/plan9go.jpg


* Concurrency model

* No more callback hell

Thanks to Channels and Goroutines all that you write is synchronous code.

It is like writing multi-threaded synchronous code, but without losing your sanity and personal life :-)
(it is hard to have a personal life when everything you do is debug non-deterministic code)


* Concurrency in details

- Concurrent code goes on goroutines
- goroutines *MAY* be executed on different threads
- goroutines communicate using channels
- channels are typed pipes of communication
- channel can also have a direction (like receive only)
- if you like to suffer there is a [[https://golang.org/pkg/sync/][sync package with mutexes and stuff]]

* Goroutines

* Goroutines concepts

- Cheaper and lightweight
- We can create thousands of them
- Goroutines are multiplexed inside threads
- [[http://www1.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf][If the Goroutine is blocked, then it will be swapped out for another goroutine on another thread instead]]
- A Go program does not deal with threads (Yeahh !!!)
- The OS is not aware of the existence of goroutines
- From the OS perspective, a Go program will behave like an event-driven C program

* Goroutines (memory consumption)

- [[http://golang.org/doc/go1.4#runtime][2Kb of stack space]]
- One (1) thread uses ~ 1MB (500 times more)
- Thread memory is protected between one another

* Goroutines (Setup and Teardown)

- Thread setup and teardown is expensive
- It has to request resources from the OS and returns it once its done

- Goroutines setup and teardow are done by runtime in userland
- The language doesn't support manual management of goroutines

* Goroutines (Switching costs)

- During a thread switch, the scheduler needs to save/restore ALL registers:

  16 General Purpose registers, PC (Program Counter), SP (Stack Pointer)
  SS (Segment Register), 16 XMM registers, FP coprocessor state
  16 AVX registers, all MSRs, etc

- During a Goroutine switch only 3 registers need to be saved/restored

  PC (Program Counter), SP (Stack Pointer) and DX

* Concurrency examples

.play helloconcurrency.go


* Concurrency examples

.play concurrency2.go


* Concurrency examples

.play concurrency3.go

* Concurrency examples

- Let's help the scheduler

.play concurrency6.go /func f/,/Second\)\n\}\n/

* Concurrency examples

- Let's invoke the scheduler

.play concurrency4.go /func f/,/Second\)\n\}\n/

* Channels

* Channels

- A channel in Go provides a connection between two goroutines, allowing them to communicate.

.code chan1.go

* Channels

.play concurrency5.go /func f/,/\} \/\//

* Synchronization

- The main function executes <–c and wait for a value to be sent.
- Similarly, when the f function executes c <– value, it waits for a receiver to be ready.
- A sender and receiver must both be ready to play their part in the communication. Otherwise we wait until they are.
- Thus channels both communicate and synchronize.


* Memory model

* Memory storage

- Stack or Heap? Forget that!
- Go encourages the developer to think in the algorithm and leave the decision of the variable storage to compiler
- Each variable in Go exists as long as there are references to it
- Variables can be allocated on the stack or garbage-collected heap

* Memory Management

- Automatic Garbage collected
- Concurrent code far easier to write
- Optimize the generation of garbage not the garbage collector
- Careful programmers can reduce the garbage collection overhead dramatically by using the language well[3]


* Objects


* Type

- On Go there is no *class* keyword, you basically define types.
- A type is a struct, where you define all your data
- Then you can define methods, associated with your type
- When a type is instantiated, it is an object


* Defining a type

.play defining_type.go 


* Abstractions

- When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck (James Whitcomb Riley).
- Interfaces provide a way to specify the behavior of an object
- Interfaces have a set of methods
- Interfaces are implicit (no "implements" declaration)
- A type can implement multiple interfaces
- Every object implements the empty interface (interface {})


* Abstractions

- HTTP Handler interface

.code httphandler.go

* Abstractions

- Implementing a counter REST

.code counterserver.go /type Counter/,/.n\)\n\}\n/

* Abstractions

- Create the server and route

.code counterservermain.go

* Abstractions

- But why Counter is a struct ?

.code counterserverint.go

* Modules

* Importing modules

Just import it using the repository. For example, importing RabbitMQ:

    import "github.com/streadway/amqp"

This still won't compile, you don't have the code. To get the code just run:

    go get github.com/streadway/amqp

To automatically get all code that your project needs, just run:

    go get ./...


* Error handling

- No Exceptions
- Explicit error handling done by programmer
- Returns error as last return value from methods
- In the compiler perspective, error values is just a simple value
- A lot of if/else for error handling? Use the Go lack of features solves that for you!

* Error handling

- Ugly code

.code errorhandlingugly.go

* Error handling

- Better code

.code errorhandlingbetter.go


* Testing

* Deployment

- Binaries are standalone, no need for a any other thing like a VM / interpreter
- Just build a docker image from scratch with your binary inside, you are good to go :-)
- Even without docker, deploy is trivial, just copy the binary and run it


* Syntax

* Syntax

- Start with C
- Improves declaration
- Left-to-Right over [[http://c-faq.com/decl/spiral.anderson.html][Clockwise/Spiral]]
  // C syntax declaration
  int *p;
  int (*fp)(int (*)(int, int), int)

  // Go syntax declaration
  var p *int    // OMG
  var fp func(func (int, int) int, int) int
- Closures declaration and invocation
  sum := func(a, b int) int { return a+b } (3, 4)

* Syntax

- Reverse array indexing
  // C array syntax
  int a[10];

  // Go array syntax
  var a [10]int

- Array declaration and initialization
  var hi []int("hi")
  var hi []int{0,1}

* Syntax

- Removed all sources misinterpretations
  // C
  if (NULL == *a) doSomethingWithNull();
  doSomethingWithA(a);

  // Go
  if NULL == *a {
          doSomethingWithNull();
  }

  doSomethingWithA(a);

- Force readability
- Facilitates lexical analyzer
- Only 25 keywords

* Freedom of syntax is bad

  char*_ = "'""/*";
  #include <stdio.h>
  #define m 21
  #define o(l, k) for(l=0; l<k; l++)
  #define n(k) o(T, k)

              int E,L,O,R,G[42][m],h[2][42][m],g[3][8],c
              [42][42][2],f[42]; char d[42]; void v( int
              b,int a,int j){ printf("\33[%d;%df\33[4%d"
              "m  ",a,b,j); } void u(){ int T,e; n(42)o(
              e,m)if(h[0][T][e]-h[1][T][e]){ v(e+4+e,T+2
              ,h[0][T][e]+1?h[0][T][e]:0); h[1][T][e]=h[
              0][T][e]; } fflush(stdout); } void q(int l
                            ,int k,int p){
                            int T,e,a; L=0
                            ; O=1; while(O
                            ){ n(4&&L){ e=
                            k+c[l] [T][0];
                            h[0][L-1+c[l][
                            T][1]][p?0-e:1

* Syntax

- Benefits of clean syntax.

Code example for remove the evil variable from the code below:

.code censorship.go /HelloWorldService/,/}/

* Syntax

- Easily parse the code using go/parser, go/token and go/ast

.code censorship.go /import/,/\)/

* Syntax

.code censorship.go /Create the AST by parsing src/,/\.\.\./ 

* Syntax

- Re-create the comments with the variables left over.
- Done!

.play censorship.go /Use the comment/,/\}\n/

* References

1. [[http://www1.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf][Analysis of the Go runtime scheduler]]
2. [[http://golang.org/doc/go1.4#runtime][Goroutine stack size was decreased from 8kB to 2kB in Go 1.4]]
3. [[http://blog.golang.org/profiling-go-programs][Profiling go programs]]

