Real Life Kubernetes
Pathfinder Study Case
17:45 18 Apr 2016
Tags: DevOps, k8s, microservices, cluster orchestration

Fabio Favero Henkes
Lead Developer - Prevention Team, Neoway
fabio.favero@neoway.com.br
http://www.neoway.com.br
@ffhenkes

Tiago CÃ©sar Katcipis
Metaphores enthusiast - Bug Factory - Datapirates Team, Neoway
tiago.katcipis@neoway.com.br
https://github.com/katcipis
@tiagokatcipis


* Why ?

* Microservices is cool :-)

- Service orientation done right
- Organized around Business Capabilities
- Smart endpoints and dumb pipes (no complex stateful protocols)
- Decentralized Governance
- Decentralized Data Management
- Cool way to apply good and old divide and conquer


* Microservices tradeoff

* For each service you need

- Build an deployable artifact
- Deploy your artifact
- Keep your service running
- Scale (better if it is autoscale)
- Load balance it (if it exposes an API, which usually is the case)
- Expose it to other services that depends on it
- Health check (check if it is actually working, not just running)
- With one service you can survive doing manual stuff
- With microservices it is automation or agonizing death :-)
.link http://martinfowler.com/bliki/MicroservicePrerequisites.html


* Docker

- Self-contained (no hell of dependencies)
- Build
- Ship
- Run
- Stateless x Stateful
- Shared volumes
- Tough management (how to solve that?)

* Kubernetes

- Scheduling
- Scaling
- Balance
- Deployment
- Pods
- Services
- Endpoints
- Replication Controllers

* Overview

.image kubernetes.png

* Pathfinder

- Concept
- Architecture
- Deploy
- AWS

* Pathfinder Architecture Overview

.image overview.png 490 581

* Pathfinder AWS Infrastructure

.image networking.png 667 811

* Pathfinder Autos Scaling

.image autoscaling.png
